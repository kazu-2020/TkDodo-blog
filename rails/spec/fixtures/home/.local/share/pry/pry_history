response.body
Json.parse(response.body)
JSON.parse(response.body)
exit
response.status
exit
json
ls
client = instance_double(DlabExperimentalApiClient)
allow(DlabExperimentalApiClient).to receive(:new).and_return(client)
allow(client).to receive(:playlist).with(series_id: 'QLZLXN22G2').and_return(json)
client.playlist(series_id: 'QLZLXN22G2')
DlabExperimentalApiClient.new.playlist(series_id: 'QLZLXN22G2')
exit
playlist
playlist[:episodes]
playlist["episodes"]
exit
playlist["episodes"]
playlist[:episodes]
exit
playlist
exit
waiting_for_publish? || secret?
exit
params
exit
self.playlist_episodes
new_episode_ids = (current_episodes | episodes) - current_episodes
exit
new_episode_order
playlist.playlist_episodes.pluck(:episode_id)
exit
episode
episode == reload.playlist_episodes[i].episode_id
exit
sort_target_episode
i
exit
episode_details
episode_from_d6(episode)
exit
Playlist.all
playlist.string_id
playlist
Playlist.new
pl = Playlist.new
pl.title = 'hoge'
pl.save
pl.errors
exit
subject
subject.playlist_episodes
subject.playlist_episodes.count
subject.playlist_episodes.size
exit
response
response.body
response.body.to_json
JSON.parse(response.body)
JSON.parse(response.body)["article"]
exit
fetch_link_editor_url
fetch_link_editor_url(url: 'hoge')
fetch_link_editor_url, { url: 'hoge' }
get fetch_link_editor_url, { url: 'hoge' }
exit
get fetch_link_editor_url, param: { url: 'https://nhk.jp' }
exit
response
response.body
exit
response.body
JSON.parse(response.body)["success"]
Editor::OpenGraph.new('https://nhk.jp')
exit
url
exit
params
paramsexit
exit
request
params
exit
params
request
exit
params
params[:url]
exit
params
trim_extension(params[:playlist_id])
exit
trim_extension(params[:playlist_id])
params
request
response
exit
external_playlist_url(playlist)
root_url
exit
external_playlist_url(playlist)
root_url
exit
response
JSON.parse(response.body)["success"]
exit
editor_data.blank
editor_data.blank?
editor_data
exit
editor_data
editor_data.blank?
exit
editor_data.blank?
editor_data
exit
editor_data
exit
params[:image]
params[:image].tempfile
exit
image
image.eof?
exit
params[:image]
exit
params
exit
params
exit
params
exit
params
request
exit
params
exit
controller
params
exit
params
params.permit('image')
params.permit('image')["image"]
exit
allow_any_instance_of(PlaylistArticlesController).to receive(:image_param).and_return(image))
allow_any_instance_of(PlaylistArticlesController).to receive(:image_param).and_return(image)
exit
image_param
exit
response.body
exit
@deck
Deck.all
@area
params
exit
params
exitexit
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
!!!
